#!/usr/bin/env python3
"""
Test complet du syst√®me tile_events pour VoronoiGraph.
"""

import numpy as np
from py_fmg.core.voronoi_graph import VoronoiGraph, generate_voronoi_graph, GridConfig
from py_fmg.core.climate import Climate
from py_fmg.core.hydrology import Hydrology
from py_fmg.core.biomes import BiomeClassifier


def test_tile_events_system():
    """Test complet du syst√®me tile_events."""
    print("üß™ Test complet du syst√®me tile_events")
    print("=" * 50)
    
    # 1. Cr√©ation du graphe
    print("1Ô∏è‚É£ Cr√©ation du graphe Voronoi...")
    config = GridConfig(width=300, height=300, cells_desired=200)
    graph = generate_voronoi_graph(config, 'test_tile_events')
    print(f"   ‚úÖ Graphe cr√©√© avec {len(graph.cell_neighbors)} cellules")
    print(f"   üìä √âv√©nements initiaux: {graph.list_tile_events()}")
    
    # 2. Test des m√©thodes tile_events
    print("\n2Ô∏è‚É£ Test des m√©thodes tile_events...")
    
    # Test set/get/has
    test_data = np.array([1, 2, 3, 4, 5])
    graph.set_tile_data('test_event', test_data)
    assert graph.has_tile_data('test_event'), "has_tile_data failed"
    retrieved = graph.get_tile_data('test_event')
    assert np.array_equal(retrieved, test_data), "get_tile_data failed"
    print("   ‚úÖ set_tile_data, get_tile_data, has_tile_data fonctionnent")
    
    # Test fallback
    fallback_value = graph.get_tile_data('nonexistent', default='fallback')
    assert fallback_value == 'fallback', "Fallback failed"
    print("   ‚úÖ Fallback par d√©faut fonctionne")
    
    # Test clear
    graph.clear_tile_event('test_event')
    assert not graph.has_tile_data('test_event'), "clear_tile_event failed"
    print("   ‚úÖ clear_tile_event fonctionne")
    
    # 3. Test d'initialisation des modules
    print("\n3Ô∏è‚É£ Test d'initialisation des modules...")
    
    # Climate
    climate = Climate(graph)
    climate_events = ['temperatures', 'precipitation', 'climate']
    for event in climate_events:
        assert graph.has_tile_data(event), f"Climate n'a pas initialis√© {event}"
    print("   ‚úÖ Climate initialise correctement ses √©v√©nements")
    
    # Hydrology
    hydrology = Hydrology(graph)
    hydro_events = ['water_flux', 'flow_directions', 'filled_heights', 'rivers', 'lakes']
    for event in hydro_events:
        assert graph.has_tile_data(event), f"Hydrology n'a pas initialis√© {event}"
    print("   ‚úÖ Hydrology initialise correctement ses √©v√©nements")
    
    # Biomes
    biomes = BiomeClassifier(graph)
    biome_events = ['biome_regions', 'biomes']
    for event in biome_events:
        assert graph.has_tile_data(event), f"BiomeClassifier n'a pas initialis√© {event}"
    print("   ‚úÖ BiomeClassifier initialise correctement ses √©v√©nements")
    
    # 4. Test des propri√©t√©s legacy
    print("\n4Ô∏è‚É£ Test des propri√©t√©s legacy...")
    
    # Test temp√©ratures
    temps = graph.temperatures
    assert temps is not None, "Propri√©t√© temperatures failed"
    assert len(temps) == len(graph.cell_neighbors), "Taille temperatures incorrecte"
    
    # Test modification via propri√©t√©
    new_temps = np.full(len(graph.cell_neighbors), 25, dtype=np.int8)
    graph.temperatures = new_temps
    assert np.array_equal(graph.temperatures, new_temps), "Setter temperatures failed"
    print("   ‚úÖ Propri√©t√©s legacy fonctionnent (get/set)")
    
    # 5. Test de validation des pr√©requis
    print("\n5Ô∏è‚É£ Test de validation des pr√©requis...")
    
    # Ajouter des heights pour les tests
    graph.heights = np.random.randint(0, 100, len(graph.cell_neighbors))
    
    try:
        climate._validate_prerequisites()
        print("   ‚úÖ Validation Climate r√©ussie")
    except Exception as e:
        print(f"   ‚ùå Validation Climate √©chou√©e: {e}")
    
    try:
        hydrology._validate_prerequisites()
        print("   ‚úÖ Validation Hydrology r√©ussie")
    except Exception as e:
        print(f"   ‚ùå Validation Hydrology √©chou√©e: {e}")
    
    try:
        biomes._validate_prerequisites()
        print("   ‚úÖ Validation BiomeClassifier r√©ussie")
    except Exception as e:
        print(f"   ‚ùå Validation BiomeClassifier √©chou√©e: {e}")
    
    # 6. Test de l'√©tat final
    print("\n6Ô∏è‚É£ √âtat final du syst√®me...")
    all_events = graph.list_tile_events()
    print(f"   üìä Tous les √©v√©nements de tuiles: {all_events}")
    print(f"   üî¢ Nombre total d'√©v√©nements: {len(all_events)}")
    
    # V√©rifier que tous les √©v√©nements critiques existent
    critical_events = [
        'temperatures', 'precipitation', 'climate',
        'water_flux', 'flow_directions', 'filled_heights', 'rivers', 'lakes',
        'biome_regions', 'biomes'
    ]
    
    missing_events = [event for event in critical_events if not graph.has_tile_data(event)]
    if missing_events:
        print(f"   ‚ùå √âv√©nements manquants: {missing_events}")
    else:
        print("   ‚úÖ Tous les √©v√©nements critiques sont pr√©sents")
    
    print("\nüéâ Test du syst√®me tile_events termin√© avec succ√®s!")
    return True


if __name__ == "__main__":
    try:
        test_tile_events_system()
        print("\n‚úÖ TOUS LES TESTS PASS√âS")
    except Exception as e:
        print(f"\n‚ùå TEST √âCHOU√â: {e}")
        import traceback
        traceback.print_exc()

